{"version":3,"sources":["firebase.js","components/AuthForm.js","routes/Auth.js","components/MadeTwitter.js","components/AddTwitter.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","dbService","getFirestore","storageService","getStorage","AuthForm","refreshUser","useState","Email","setEmail","Password","setPassword","NewAccount","setNewAccount","Errer","setErrer","onChangeValue","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","updateProfile","user","displayName","signInWithEmailAndPassword","message","className","type","placeholder","required","onChange","onClick","Auth","onSocialClick","providerGoogle","GoogleAuthProvider","signInWithPopup","then","result","console","log","catch","error","providerGithub","GithubAuthProvider","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","MadeTwitter","isOwner","Editing","setEditing","text","UpdateText","setUpdateText","docRef","doc","id","onDeleteClick","window","confirm","deleteDoc","attachmentUrl","fileRef","ref","deleteObject","toggleEditing","updateDoc","src","alt","faTrash","faPencilAlt","AddTwitter","props","SendText","setSendText","Attachment","setAttachment","mtwitterCollectionRef","collection","userObj","uid","uuidV4","uploadString","uploadResult","getDownloadURL","mtwitterData","createdAt","Date","now","creatorId","addDoc","onClearAttachment","fileInput","useRef","current","maxLength","htmlFor","faPlus","accept","files","theFile","reader","FileReader","length","onloadend","finishedEvent","currentTarget","readAsDataURL","backgroundImage","faTimes","Home","Mteitters","setMteitters","useEffect","q","query","orderBy","onSnapshot","snapshot","nweetArr","docs","map","marginTop","Profile","NewDisplayName","setNewDisplayName","history","useHistory","onClickLogOut","signOut","push","currentUser","event","autoFocus","Navigation","to","faUser","Router","isLoggedIn","exact","path","App","Init","setInit","UserObj","setUserObj","onAuthStateChanged","args","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a2b5a95.chunk.js","sourcesContent":["//이후: 버전 9 모듈식\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    // firebase 설정과 관련된 개인 정보\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SEMDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\n\r\n// 버전 9부터는 요런식으로 가져와야 합니다.\r\nexport const auth = getAuth(firebaseApp);\r\nexport const dbService = getFirestore(firebaseApp);\r\nexport const storageService = getStorage(firebaseApp);\r\n","import React, { useState } from 'react';\r\nimport { auth } from \"../firebase\";\r\nimport { \r\n  createUserWithEmailAndPassword, signInWithEmailAndPassword, \r\n  updateProfile\r\n} from 'firebase/auth';\r\n\r\nfunction AuthForm({refreshUser}) {\r\n  const [Email, setEmail] = useState(\"\");\r\n  const [Password, setPassword] = useState(\"\");\r\n  const [NewAccount, setNewAccount] = useState(true);\r\n  const [Errer, setErrer] = useState('')\r\n\r\n  const onChangeValue = (e) =>{\r\n    const {\r\n      target: {name, value}\r\n    } = e;\r\n\r\n    if(name === 'email') setEmail(value);\r\n    else setPassword(value);\r\n  }\r\n\r\n  const onSubmit = async(e) => {\r\n    //버튼이 눌러질때 새로고침이벤트가 발생되지 않도록 코드로 막아줌\r\n    e.preventDefault();\r\n    try{\r\n      if(NewAccount){\r\n        //true: create account\r\n        //신규 계정 생성에 성공하면 사용자가 자동으로 로그인됩니다.\r\n        const data = await createUserWithEmailAndPassword(auth, Email, Password);\r\n        //displayName을 초기화시켜줌\r\n        await updateProfile(data.user, { displayName: 'No Name' });\r\n        //user데이터를 사용하기 위해서 새로고침함.\r\n        refreshUser();\r\n      }\r\n      else{\r\n        //false: log in\r\n        //이메일과 패스워드를 통해 저장된 계정과 일치하면 로그인함\r\n        await signInWithEmailAndPassword(auth, Email, Password);\r\n      }\r\n      //로그인이 되면 App.js의 useEffact가 살행되어 onAuthStateChanged 실행됨\r\n    }\r\n    catch(errer){\r\n      setErrer(errer.message);\r\n    }\r\n  };\r\n\r\n  //로그인을 할지 계정생성할지를 선택\r\n  const toggleAccount = ()=>{\r\n    setNewAccount(!NewAccount);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form className=\"container\" onSubmit={onSubmit}>\r\n        <input \r\n          className=\"authInput\"\r\n          name=\"email\" \r\n          type=\"text\" \r\n          placeholder=\"Email\" \r\n          required \r\n          value={Email} \r\n          onChange={onChangeValue}\r\n        />\r\n        <input \r\n          className=\"authInput\"\r\n          name=\"password\" \r\n          type=\"password\" \r\n          placeholder=\"Password\" \r\n          required \r\n          value={Password} \r\n          onChange={onChangeValue}\r\n        />\r\n        <input \r\n          className=\"authInput authSubmit\" \r\n          type=\"submit\" \r\n          value={NewAccount ? \"Create Account\" :\"Log In\"} \r\n        /><br/>\r\n        {Errer && <span className=\"authError\">{Errer}</span>}\r\n      </form>\r\n      <span className=\"authSwitch\" onClick={toggleAccount}>\r\n        {NewAccount ? \"Sign in\": \"Create Account\"}\r\n      </span>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AuthForm;\r\n","import React from 'react';\r\nimport { auth } from \"../firebase\";\r\nimport { \r\n  GoogleAuthProvider, GithubAuthProvider, signInWithPopup\r\n} from 'firebase/auth';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter, faGoogle, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport AuthForm from '../components/AuthForm';\r\n\r\nfunction Auth({refreshUser}) {\r\n  //소셜 로그인 구현(구글, 깃헙)\r\n  const onSocialClick = async(e) =>{\r\n    if(e.target.name === \"google\"){\r\n      //구글 로그인시\r\n      const providerGoogle = new GoogleAuthProvider();\r\n      await signInWithPopup(auth, providerGoogle)\r\n      .then((result) => {\r\n        console.log(\"google login success!!\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    }\r\n    else if(e.target.name === \"github\"){\r\n      //깃헙로그인시\r\n      //단 깃헙 아이디가 구글로 가입되었을경우는 중복되어 구글로그인을 사용할수 없음..\r\n      const providerGithub = new GithubAuthProvider();\r\n      await signInWithPopup(auth, providerGithub)\r\n      .then((result) => {\r\n        console.log(\"github login success!!\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    }\r\n    //로그인이 되면 App.js의 useEffact가 살행되어 onAuthStateChanged 실행됨\r\n  }\r\n  \r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm refreshUser={refreshUser}/>\r\n      <div className=\"authBtns\">\r\n        <button className=\"authBtn\" name=\"google\" onClick={onSocialClick}>\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button className=\"authBtn\" name=\"github\" onClick={onSocialClick}>\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Auth;\r\n","import React, {useState} from 'react';\r\nimport { dbService, storageService } from \"../firebase\";\r\nimport { doc, deleteDoc, updateDoc }from\"firebase/firestore\";\r\nimport { deleteObject, ref } from \"@firebase/storage\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\n//내글 일때 수정, 삭제가능\r\nfunction MadeTwitter({data, isOwner}) {\r\n  const [Editing, setEditing] = useState(false);\r\n  const [UpdateText, setUpdateText] = useState(data.text);\r\n\r\n  //mtwitters 콜랙션에서 doc id와 매칭되는 doc가져오기\r\n  const docRef = doc(dbService, \"mtwitters\", `${data.id}`);\r\n\r\n  const onDeleteClick = async() =>{\r\n    const ok = window.confirm(\"정말 삭제하시겠습니까?\");\r\n    if(ok){\r\n      //mtwitters 콜랙션에서 해당 문서 삭제\r\n      await deleteDoc(docRef );\r\n      //첨부 이미지도 있을때 storage에서 파일 삭제\r\n      if(data.attachmentUrl !==\"\"){\r\n        //storage에 해당 경로에 있는 파일 참조\r\n        const fileRef = ref(storageService, data.attachmentUrl)\r\n        //storage에서 해당 파일 삭제\r\n        await deleteObject(fileRef)\r\n      }\r\n    }\r\n  }\r\n\r\n  //수정 on/off\r\n  const toggleEditing = () => {\r\n    setEditing(!Editing);\r\n  }\r\n\r\n  const onChangeText = (e) =>{\r\n    setUpdateText(e.target.value)\r\n  }\r\n\r\n  const onSubmit = async(e) =>{\r\n    e.preventDefault();\r\n\r\n    await updateDoc(docRef, {\r\n      text: UpdateText,\r\n    });\r\n    setEditing(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"mTwitter\">\r\n      {Editing ?\r\n          <>\r\n            <form className=\"container mTwitterEdit\" onSubmit={onSubmit}>\r\n              <input \r\n                className=\"formInput\"\r\n                type=\"text\" \r\n                placeholder=\"Edit your text\"\r\n                value={UpdateText} \r\n                onChange={onChangeText} \r\n                required\r\n              />\r\n              <input className=\"formBtn\" type=\"submit\" value=\"Update\" />\r\n            </form>\r\n            <button className=\"formBtn cancelBtn\" onClick={toggleEditing} >Cancel</button>\r\n          </> :    \r\n          <>\r\n            <h4>{data.text}</h4>\r\n            {data.attachmentUrl && <img src={data.attachmentUrl} alt=\"attachment\" />}\r\n            {isOwner && (\r\n              <div className=\"mTwitter_actions\">\r\n                <span onClick={onDeleteClick}>\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </span>\r\n                <span onClick={toggleEditing}>\r\n                  <FontAwesomeIcon icon={faPencilAlt} />\r\n                </span>\r\n              </div>\r\n            )}\r\n          </>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MadeTwitter;\r\n","import React, { useState, useRef } from 'react';\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport { storageService, dbService } from \"../firebase\";\r\nimport { ref, uploadString, getDownloadURL } from \"@firebase/storage\";\r\nimport { collection, addDoc } from \"firebase/firestore\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction AddTwitter(props) {\r\n  //저장할 글\r\n  const [SendText, setSendText] = useState(\"\");\r\n  //attachment 첨부파일의 이미지파일\r\n  const [Attachment, setAttachment] = useState(\"\");\r\n\r\n  //Cloud Firestore 에서 mtwitters란 collection을 참조하기\r\n  const mtwitterCollectionRef = collection(dbService, 'mtwitters');\r\n\r\n  const onSubmit = async(e) =>{\r\n    //입력값이 비어 있을때 체크\r\n    if(SendText === \"\") return;\r\n\r\n    e.preventDefault();\r\n\r\n    //저장소에 있는 첨부파일 이미지 경로\r\n    let attachmentUrl = \"\";\r\n    if(Attachment !== \"\"){\r\n      //파일에 대한 참고를 가짐\r\n      //ref(storage: FirebaseStorage, url?: string): StorageReference\r\n      //url = `${유저아이디명 폴더}/${사진이름}`\r\n      const fileRef = ref(storageService, `${props.userObj.uid}/${uuidV4()}`);\r\n\r\n      //텍스트화된 이미지를 storage에 업로드하고 처리결과 데이터 반환\r\n      //Promise 이므로 비동기 처리\r\n      const uploadResult = await uploadString(fileRef, Attachment, \"data_url\");\r\n\r\n      //storage에 저장된 파일경로를 반환\r\n      //Promise 이므로 비동기 처리, Obj의 Url 반환함\r\n      //UploadResult.ref: StorageReference\r\n      attachmentUrl = await getDownloadURL(uploadResult.ref);\r\n    }\r\n  \r\n    /*\r\n    * Document Data를 추가\r\n    * text: 내용글\r\n    * createdAt: 생성날짜\r\n    * creatorId: 로그인 유저의 uid\r\n    * attachmentUrl: 첨부 이미지\r\n    */\r\n    const mtwitterData = {\r\n      text: SendText,\r\n      createdAt: Date.now(),\r\n      creatorId: props.userObj.uid,\r\n      attachmentUrl\r\n    }\r\n    //Cloud Firestore에서 Document ID를 자동으로 생성하도록 addDoc() 사용, Promise 이므로 비동기 처리\r\n    await addDoc(mtwitterCollectionRef, mtwitterData);\r\n\r\n    //쓴글 초기화\r\n    setSendText(\"\");\r\n    //이미지업로드 초기화\r\n    onClearAttachment();\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setSendText(e.target.value);\r\n  }\r\n\r\n  const onFileChange = (e)=>{\r\n    const {\r\n      target:{files}\r\n    } = e;\r\n    //input에 있는 모든 파일중에 첫번째 파일만 받도록함\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n\r\n    if(files.length !== 0){\r\n      //reader에 event listner를 추가하여 파일 로딩이 끝났을때 프리뷰 이미지 정보를 제공\r\n      reader.onloadend = (finishedEvent) =>{\r\n        const {\r\n          currentTarget:{result}\r\n        } = finishedEvent;\r\n\r\n        // console.log(result);\r\n        //텍스트화된 이미지를 state에 저장\r\n        setAttachment(result);\r\n      };\r\n      \r\n      //readAsDataURL을 사용하여 파일을 읽음\r\n      reader.readAsDataURL(theFile);\r\n    }\r\n    else{\r\n      //파일업로드를 취소시 프리뷰 초기화\r\n      setAttachment(\"\");\r\n    }  \r\n  }\r\n\r\n  //파일 업로드 부분 참조\r\n  const fileInput = useRef();\r\n\r\n  //프리뷰 클리어 버튼 클릭시\r\n  const onClearAttachment = () => {\r\n    //파일 업로드 부분의 value 값 초기화\r\n    fileInput.current.value = \"\";\r\n    //프리뷰 초기화\r\n    setAttachment(\"\");\r\n  }\r\n    \r\n  return (\r\n    <form className=\"addTwitterForm\" onSubmit={onSubmit}>\r\n      <div className=\"addTwitterInput_container\">\r\n        <input \r\n          className=\"addTwitterInput_input\"\r\n          value={SendText} \r\n          onChange={onChange} \r\n          type=\"text\" \r\n          placeholder=\"What is on your mind?\" \r\n          maxLength={120} \r\n        />\r\n        <input className=\"addTwitterInput_arrow\" type=\"submit\" value=\"&rarr;\" />\r\n      </div>\r\n      <label htmlFor=\"attach-file\" className=\"addTwitterInput_label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input \r\n        className=\"addTwitterInput_file\"\r\n        id=\"attach-file\"\r\n        type=\"file\" \r\n        accept=\"image/*\" \r\n        onChange={onFileChange} \r\n        ref={fileInput}\r\n      />\r\n      {Attachment && (\r\n        <div className=\"addTwitterForm_attachment\">\r\n          <img src={Attachment} style={{backgroundImage:Attachment}} alt=\"Img\" />\r\n          <div className=\"addTwitterForm_clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddTwitter;","import React, { useState, useEffect } from 'react';\r\nimport { dbService } from \"../firebase\";\r\nimport { \r\n  collection, query, \r\n  onSnapshot, orderBy\r\n} from \"firebase/firestore\";\r\n\r\nimport MadeTwitter  from '../components/MadeTwitter';\r\nimport AddTwitter from '../components/AddTwitter';\r\n\r\nfunction Home(props) {\r\n  //twitter 리스트\r\n  const [Mteitters, setMteitters] = useState([]);\r\n\r\n  useEffect(() => {\r\n    //Cloud Firestore 에서 mtwitters란 collection을 참조하기\r\n    const mtwitterCollectionRef = collection(dbService, 'mtwitters');\r\n\r\n    //쿼리 작성, where(), orderBy() 포함해서 조건을 넣을수 있음\r\n    const q = query(\r\n      mtwitterCollectionRef,\r\n      orderBy(\"createdAt\", \"desc\")\r\n    );\r\n    //실시간 반영을 위해 사용\r\n    //스냅샷 핸들러는 문서의 추가, 삭제, 수정 등 쿼리 결과가 변경될 때마다 새 쿼리 스냅샷을 수신합니다.\r\n    onSnapshot(q, (snapshot) => {\r\n      const nweetArr = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setMteitters(nweetArr);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <AddTwitter userObj={props.userObj}/>\r\n      <div style={{ marginTop: 30 }}>\r\n        {Mteitters.map((data) =>(\r\n          <MadeTwitter \r\n            key={data.id}\r\n            data={data} \r\n            isOwner={data.creatorId === props.userObj.uid}/>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\r\nimport { auth } from \"../firebase\";\r\nimport { signOut, updateProfile } from 'firebase/auth';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Profile({userObj, refreshUser}) {\r\n  const [NewDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const history = useHistory();\r\n  const onClickLogOut = async(e) =>{\r\n    e.preventDefault();\r\n\r\n    await signOut(auth);\r\n    history.push(\"/\");\r\n  }\r\n\r\n  const onChange = (event)=>{\r\n    const {\r\n      target: {value}\r\n    } = event;\r\n\r\n    setNewDisplayName(value);\r\n  }\r\n\r\n  const onSubmit = async(e) =>{\r\n    e.preventDefault();\r\n\r\n    //displayName이 수정되었으면 업데이트 처리\r\n    if(userObj.displayName !== NewDisplayName){\r\n      //프로필 이름과 사진을 수정할 수 있음\r\n      // await updateProfile(userObj, { displayName: NewDisplayName });\r\n      await updateProfile(auth.currentUser, { displayName: NewDisplayName });\r\n      //user 데이터를 사용하기 위해 새로고침함\r\n      refreshUser();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form className=\"profileForm\" onSubmit={onSubmit}>\r\n        <input \r\n          className=\"formInput\"\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={NewDisplayName}\r\n        />\r\n        <input \r\n          className=\"formBtn addMargin\" \r\n          type=\"submit\" \r\n          value=\"Update Profile\" \r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onClickLogOut}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Navigation({userObj}) {\r\n  return (\r\n    <nav>\r\n      <ul className=\"naviUl\">\r\n        <li>\r\n          <Link className=\"homeLink\" to=\"/\">\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link className=\"profileLink\" to=\"/profile\">\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span className=\"displayName\">\r\n              {userObj.displayName===null? (\"...\") : (userObj.displayName + \"'s Profile\")}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport Auth from '../routes/Auth';\r\nimport Home from '../routes/Home';\r\nimport Profile from '../routes/Profile';\r\nimport Navigation from './Navigation';\r\n\r\nfunction Router(props) {\r\n  return (\r\n    <HashRouter>\r\n      {props.isLoggedIn && <Navigation userObj={props.userObj}/>}\r\n\r\n      {props.isLoggedIn ? (\r\n        <div className=\"routerStyle\">\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Home userObj={props.userObj}/>\r\n          </Route>\r\n          <Route exact path=\"/profile\">\r\n            <Profile \r\n              userObj={props.userObj}\r\n              refreshUser={props.refreshUser}\r\n            />\r\n          </Route>\r\n        </Switch> \r\n        </div>\r\n      ) : (\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Auth \r\n              refreshUser={props.refreshUser}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      )}\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default Router;\r\n","import React, { useState, useEffect } from 'react';\nimport AppRouter from './Router';\nimport { auth } from \"../firebase\";\nimport { updateProfile } from 'firebase/auth';\n\nfunction App() {\n  //false이면 AppRouter를 숨김 근데 왜쓰는지 모르겠음 없어도 지장은 없는데 말이지...\n  const [Init, setInit] = useState(false);\n  const [UserObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    //사용자의 로그인 상태의 변화를 체크\n    //이벤트리스너라고 생각하는게 편함?\n    //authState가 변경됨을 감지하고, onAuthStateChanged에 넣어준 callback 함수를 실행할 수 있는 로직입니다.\n    auth.onAuthStateChanged((user) => {\n      // console.log('onAuthStateChanged');\n      // console.log(user);\n      if(user){\n        //user데이터가 크고 많기때문에 전달전달되는 시간이 지연되고, 불필요한 요소들이 많으므로 쓸것만 재정의\n        setUserObj({\n          displayName: user.displayName,\n          uid:user.uid,\n          updateProfile:(args) => updateProfile(user, args)\n        })\n      }\n      else{\n        //이걸 안해주면 로그아웃이 안됨...\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  //user를 새로고침하는 기능을 가짐\n  const refreshUser = () => {\n    const user = auth.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid:user.uid,\n      updateProfile:(args) => updateProfile(user, args)\n    })\n  }\n\n  return (\n    <>\n      {Init ? (\n        <AppRouter \n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(UserObj)}\n          userObj={UserObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}